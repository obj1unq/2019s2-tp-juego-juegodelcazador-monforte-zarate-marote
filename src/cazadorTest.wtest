import cazador.*
import enemigos.*
import armas.*
import cosasExtras.*

describe "cazador" {
	
const ballesta = new Ballesta()	
const estaca = new EstacaYMartillo()
const armaDePlata = new ArmaDePlata()
const sal = new Sal()
const ajo = new Ajo()
const fantasma = new Fantasma(hp = 10, position = 17->3 , atk = 10)
const bruja = new Bruja(hp = 50, position = 15->0 , atk = 40)
const murcielago = new Murcielago(hp = 15, position = 17->0 , atk = 30)
	
	
	test "Cazador recoge armas" {
    cazador.recogerArmaOProteccion(ballesta)
    cazador.recogerArmaOProteccion(armaDePlata)
    cazador.recogerArmaOProteccion(estaca)
	assert.equals([ballesta, armaDePlata, estaca], cazador.inventario())  
}

    test "Cazador recoge sal" {
      cazador.recogerArmaOProteccion(sal)
	  assert.that(cazador.inventario().contains(sal))  
}

    test "Tiempo de protreccion por ajo" {
    cazador.recogerArmaOProteccion(ajo)
	assert.equals(10, cazador.tiempoDeProteccionConAjo())  
}
   
    test "Cantidad de ballesta en inventario" {
    	cazador.recogerArmaOProteccion(ballesta)
        cazador.recogerArmaOProteccion(armaDePlata)
        cazador.recogerArmaOProteccion(estaca)
        cazador.recogerArmaOProteccion(ballesta)
        assert.equals(2,cazador.cantDe(ballesta))
    }
   
    test "Cazador recoge energia" {
    cazador.vida(50)	
    cazador.recogerVida()
    assert.equals(60, cazador.vida())	
    }
    
    test "Cazador recoge vida" {
    cazador.vida(2)	
    cazador.recogerVida()
    assert.equals(3, cazador.vida())	
    }

    test "Recibe ataque de fantasma" {
    cazador.recibirAtaque(fantasma)
    assert.equals(90, cazador.vida())	
    }
    
    test "Recibe ataque de murcielago" {
    cazador.recibirAtaque(murcielago)
    assert.equals(70, cazador.vida())	
    }
    
    test "Recibe ataque de bruja" {
    cazador.recibirAtaque(bruja)
    assert.equals(60, cazador.vida())	
    }
    
    test "Gana el juego" {
      dracula.hp(0)	
      assert.that(cazador.ganaElJuego()) 	
    }
    
    test "No gana el juego" {
      assert.notThat(cazador.ganaElJuego())    	
    }
    
    test "Pierde el juego" {
        cazador.vida(0)
        assert.that(cazador.pierdeElJuego())	
    }
    
    test "No pierde el juego" {
    	assert.notThat(cazador.pierdeElJuego())
    }
}