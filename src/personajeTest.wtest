import wollok.game.*
import personaje.*
import enemigos.*
import armas.*
import cosasExtras.*
import protecciones.*
import municion.*
import objetosVisuales.*

describe "cazador" {
	
const sal = new Sal()
const fantasma = new Fantasma(position = 17->3, hp =1)
const bruja = new Bruja(position = 15->0,  hp =1)
const murcielago = new Murcielago(position = 17->0,  hp =1)
const flecha = new Flecha()
const bala = new Bala()
	
	fixture{
		game.addVisual(ballesta)
		game.addVisual(pistolaDePlata)
		game.addVisual(estaca)
		game.height(14)
		game.width(22)
			
	}
	
	test "Cazador recoge armas" {
    cazador.recoger()
    cazador.recoger()
    cazador.recoger()
	assert.that(cazador.inventario().contains({[ballesta, pistolaDePlata, estaca]}))  
	}

    test "Cazador recoge sal" {
      cazador.recoger()
	  assert.equals(1, cazador.cantSal())  
}
   
   /* test "Cantidad de ballesta en inventario" {
       cazador.recoger(ajo)
       cazador.recoger(ajo)
       cazador.recoger(ajo)
       assert.equals(3,cazador.cantDe(ajo))
    }*/
    
    test "Cazador recoge vida" {	
       cazador.agregarVida()
       assert.equals(4, vidasDeJuego.contador())	
    }

    test "Recibe ataque de fantasma" {
       cazador.recibirAtaque(fantasma.atk())
       assert.equals(2, vidasDeJuego.contador())	
    }
    
    test "Recibe ataque de murcielago" {
       cazador.recibirAtaque(murcielago.atk())
       assert.equals(2, vidasDeJuego.contador())	
    }
    
    test "Gana el juego" {	
       assert.that(cazador.ganaElJuego()) 	
    }
    
    test "No gana el juego" {
       assert.notThat(cazador.ganaElJuego())    	
    }
    
    test "Pierde el juego" {
       //assert.equals(0,vidasDeJuego.contador())	
    }
    
    test "No pierde el juego" {
      // assert.notThat(cazador.muere())
    }
}
